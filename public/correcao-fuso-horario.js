/**
 * CORRE√á√ÉO PARA O PROBLEMA DE FUSO HOR√ÅRIO
 * 
 * Execute este script no console da p√°gina ou incluir no sistema
 * para corrigir o problema de convers√£o dupla de timezone
 */

(function() {
    console.log('üîß Aplicando corre√ß√£o para problema de fuso hor√°rio...');
    
    if (typeof DateUtils === 'undefined') {
        console.error('‚ùå DateUtils n√£o encontrado. Certifique-se de que utils.js est√° carregado.');
        return;
    }
    
    // Backup da fun√ß√£o original
    DateUtils._convertFromCuiabaToUTC_ORIGINAL = DateUtils.convertFromCuiabaToUTC;
    
    // Fun√ß√£o corrigida
    DateUtils.convertFromCuiabaToUTC = function(date) {
        // Se √© uma string no formato ISO
        if (typeof date === 'string') {
            // Parse explicitamente como Cuiab√°
            return luxon.DateTime.fromISO(date, { zone: 'America/Cuiaba' }).toUTC();
        }
        
        // Se √© um Date JavaScript - AQUI ESTAVA O PROBLEMA
        if (date instanceof Date) {
            // PROBLEMA: Date JavaScript n√£o preserva timezone espec√≠fica
            // SOLU√á√ÉO: Extrair componentes e criar explicitamente em Cuiab√°
            
            const year = date.getFullYear();
            const month = date.getMonth() + 1; // getMonth() retorna 0-11
            const day = date.getDate();
            const hour = date.getHours();
            const minute = date.getMinutes();
            const second = date.getSeconds();
            const millisecond = date.getMilliseconds();
            
            // Criar explicitamente no timezone de Cuiab√°
            const dtCuiaba = luxon.DateTime.fromObject({
                year, month, day, hour, minute, second, millisecond
            }, { zone: 'America/Cuiaba' });
            
            return dtCuiaba.toUTC();
        }
        
        // Se j√° √© DateTime do Luxon
        if (luxon.DateTime.isDateTime(date)) {
            return date.setZone('America/Cuiaba').toUTC();
        }
        
        // Fallback
        return luxon.DateTime.now().setZone('America/Cuiaba').toUTC();
    };
    
    console.log('‚úÖ Corre√ß√£o aplicada! DateUtils.convertFromCuiabaToUTC agora funciona corretamente.');
    
    // Teste r√°pido
    const teste = new Date('2025-09-01T07:00:00');
    const resultadoOriginal = DateUtils._convertFromCuiabaToUTC_ORIGINAL(teste);
    const resultadoCorrigido = DateUtils.convertFromCuiabaToUTC(teste);
    
    console.log('üß™ Teste da corre√ß√£o:');
    console.log(`Input: ${teste.toString()}`);
    console.log(`Fun√ß√£o original: ${resultadoOriginal.toISO()} (${resultadoOriginal.toFormat('HH:mm')} UTC)`);
    console.log(`Fun√ß√£o corrigida: ${resultadoCorrigido.toISO()} (${resultadoCorrigido.toFormat('HH:mm')} UTC)`);
    
    const diferencaHoras = Math.abs(resultadoOriginal.hour - resultadoCorrigido.hour);
    if (diferencaHoras > 0) {
        console.log(`‚úÖ Corre√ß√£o bem-sucedida! Diferen√ßa de ${diferencaHoras} horas corrigida.`);
    } else {
        console.log('‚ö†Ô∏è Aparentemente n√£o havia problema ou o problema √© outro.');
    }
    
    // Fun√ß√£o para reverter a corre√ß√£o se necess√°rio
    window.reverterCorrecaoDateUtils = function() {
        DateUtils.convertFromCuiabaToUTC = DateUtils._convertFromCuiabaToUTC_ORIGINAL;
        console.log('‚Ü©Ô∏è Corre√ß√£o revertida para fun√ß√£o original.');
    };
    
    console.log('üí° Para reverter, execute: reverterCorrecaoDateUtils()');
})();
